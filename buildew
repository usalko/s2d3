#!/bin/bash

GO=go
COMMAND=$1
while [[ "$#" -gt 0 ]]; do
    case $1 in
    --go-version)
        GO_VERSION="$2"
        shift
        shift
        ;;
    *)
        COMMAND=$1
        shift
        break
        ;;
    esac
    shift
done

# MODULES
MODULES=(utils models client services .)

if [ $COMMAND == "test" ]; then
    echo Start all tests:
    $GO test
fi

if [ $COMMAND == "tidy" ]; then
    echo Start tidy for all modules:
    for module in "${MODULES[@]}"; do
        echo -n Tidy $module
        CD=$PWD
        cd $module
        $GO mod tidy
        result=$?
        cd $CD
        if [ $result -ne 0 ]; then
            echo -e '\033[01;31m' " Error"
            echo -e -n '\033[00m'
        else
            echo -e '\033[01;32m' " Done"
            echo -e -n '\033[00m'
        fi
    done
fi

if [ "$COMMAND" == "version" ]; then
    echo Set version:
    # Remove initial v for prevent vv issue

    # TODO: change dependencies for all subpackages (client, models, services, etc...)

    TAG_SUFFIX=${1#v}

    git tag "v$TAG_SUFFIX"
    git push origin "v$TAG_SUFFIX"

    SUB_MODULES=('utils' 'models' 'services' 'client')
    for SUB_MODULE in "${SUB_MODULES[@]}"; do
        git tag "$SUB_MODULE/v$TAG_SUFFIX"
        git push origin "$SUB_MODULE/v$TAG_SUFFIX"
    done
fi

if [ "$COMMAND" == "publish" ]; then
    TAG_SUFFIX=${1#v}
    SUB_MODULES=('utils' 'models' 'services' 'client')
    for SUB_MODULE in "${SUB_MODULES[@]}"; do
        GOPROXY=proxy.golang.org go list -m "github.com/usalko/s2d3/$SUB_MODULE@v$TAG_SUFFIX"
    done
    GOPROXY=proxy.golang.org go list -m "github.com/usalko/s2d3@v$TAG_SUFFIX"
fi

# ======================================= GENERAL INFO ============================================
if [ "$COMMAND" == "modules" ] || [ "$COMMAND" == "module" ]; then
    echo There are available modules:
    for MODULE in "${MODULES[@]}"; do
        echo ' - ' $MODULE
    done
fi

# =================================================================================================

AVAILABLE_COMMANDS="test tidy version publish modules"
echo ''
[[ $AVAILABLE_COMMANDS =~ (^| )$COMMAND($| ) ]] && echo 'Ok' || (echo 'Unknown command: ' "$COMMAND" && echo 'Available commands are: ' "$AVAILABLE_COMMANDS")

# Useful references:
# Submodule issues: @see https://stackoverflow.com/questions/67678203/why-does-go-get-fail-with-invalid-version-unknown-revision
# ....
